# .rules - 用于 Vue 2.6 布局编辑器的 Cursor AI 上下文规则

# --- Files (文件) ---
# 描述重要文件或目录及其用途。

file:src/views/LayoutEditor.vue
desc: 整个布局编辑体验的主视图组件。它集成了配置区域 (ConfigArea) 和预览区域 (PreviewRenderer)，并通过 Vuex 处理栏目选择和保存操作。

file:src/store/modules/layout.js
desc: 用于管理布局状态的核心 Vuex 模块。它包含 `layoutConfig` 数组、`availableWidgets`、加载/保存标志，以及所有用于操作布局结构的 mutation 和 action (添加/删除/移动行/组件，更新属性)。这是布局信息的唯一真实来源。

file:src/services/widgetRegistry.js
desc: 定义编辑器所有可用的组件类型。每个定义包括组件的名称、图标、组件本身 (动态导入)，以及关键的配置 `schema` (模式)。Vuex 和编辑器 UI 会使用这个注册表。

file:src/components/editor/ConfigArea.vue
desc: 编辑器 UI 组件，负责渲染和管理布局行的列表 (`ConfigRow`)。使用 `vuedraggable` 实现拖放以重新排序行。与 Vuex 交互以添加/删除/移动行。

file:src/components/editor/ConfigRow.vue
desc: 编辑器 UI 组件，代表配置区域中的单行。它渲染其包含的列 (`ConfigColumn`) 并提供删除该行的控件。

file:src/components/editor/ConfigColumn.vue
desc: 编辑器 UI 组件，代表行内的单个列。它渲染其中的组件列表 (`ConfigWidget`)，并使用 `vuedraggable` 实现列内和列间组件的拖放重新排序。提供向列中添加新组件的 UI。与 Vuex 交互进行组件操作。

file:src/components/editor/ConfigWidget.vue
desc: 编辑器 UI 组件，代表配置区域列内的单个组件实例。显示组件的名称/图标，并提供编辑其属性 (打开 `WidgetConfigForm`) 和删除它的控件。与 Vuex 交互。

file:src/components/editor/WidgetConfigForm.vue
desc: 一个动态表单组件，通常在模态框/对话框中使用。它接收一个 `schema` 对象 (来自 `widgetRegistry` 中组件的定义) 和 `initialProps`，并使用 Element UI 组件自动生成相应的表单字段。发出更新后的属性。

file:src/components/preview/PreviewRenderer.vue
desc: 根据 `layoutConfig` 数据 (通常作为来自 `LayoutEditor` 的 prop 传入，后者从 Vuex 获取) 渲染布局的实际视觉预览。它使用配置数据动态渲染 `src/components/widgets/` 中合适的组件 (`<component :is="...">`)。

file:src/components/widgets/
desc: 包含实际可复用 Vue 组件的目录，这些组件用于渲染内容 (例如 ImageWidget.vue, NewsListWidget.vue)。`PreviewRenderer` 使用它们，并通过 props 进行配置。它们可能会使用 `mockApi` 获取自己的数据。

file:src/services/mockApi.js
desc: 模拟后端 API 调用。提供函数来获取/保存不同栏目的布局配置，以及获取组件所需示例数据 (例如新闻条目)。

file:src/store/mutation-types.js
desc: 定义 Vuex mutation 名称的常量，以确保一致性并避免拼写错误。供 Vuex 模块和提交 mutation 的组件使用。

# --- Symbols (核心概念) ---
# 定义项目中使用的关键术语或概念。

symbol:LayoutConfig
desc: 核心数据结构，通常是存储在 Vuex `layout` 模块状态 (`state.layoutConfig`) 中的一个行对象数组。每行包含一个列对象数组，每列包含一个组件实例对象数组。结构通常为 `{ id, type, props }`。

symbol:Widget
desc: 一个可复用的 Vue 组件，负责在最终预览中显示特定类型的内容 (例如图片、新闻列表)。位于 `src/components/widgets/`。这些是由 `PreviewRenderer` 渲染的组件。

symbol:WidgetInstance
desc: `LayoutConfig` 内的一个对象，代表布局中某个 Widget 的具体使用实例。包含一个唯一的 `id`、`type` (与 `WidgetRegistry` 中键匹配的字符串) 和一个包含其配置值的 `props` 对象。

symbol:WidgetProps
desc: 一个包含特定 `WidgetInstance` 配置键值对的对象。其结构和允许的键/值由 `WidgetSchema` 定义。

symbol:WidgetSchema
desc: 在 `WidgetRegistry` 中为每种组件类型定义的 JavaScript 对象。它描述了组件可配置的 `props`，包括它们的类型 (string, number, boolean, select)、标签 (label)、默认值、验证规则 (required, min, max) 和选项 (options, 用于 select)。`WidgetConfigForm` 使用它来生成 UI。

symbol:WidgetRegistry
desc: 服务 (`src/services/widgetRegistry.js`)，充当所有可用组件类型的目录。它将组件类型字符串映射到它们的显示名称、图标、Vue 组件和 `WidgetSchema`。

symbol:VuexLayoutModule
desc: 在 `src/store/modules/layout.js` 中定义的命名空间 Vuex 模块 (`layout`)。它管理与布局编辑器相关的全部状态。

symbol:EditorComponent
desc: 通常指 `src/components/editor/` 内用于构建配置界面的组件 (ConfigArea, ConfigRow, ConfigColumn, ConfigWidget, WidgetConfigForm)。

symbol:PreviewComponent
desc: 通常指 `src/components/preview/` 内的组件，主要是 `PreviewRenderer`。

symbol:DragAndDrop
desc: 用户交互机制，使用 `vuedraggable` 实现，允许用户在编辑器 UI 中重新排序行和组件。通过 Vuex mutation (`MOVE_ROW`, `MOVE_WIDGET`) 进行协调。

# --- Docs (文档入口) ---
# 指向作为高级文档或入口点的文件。

doc:src/views/LayoutEditor.vue
desc: 理解整体结构、编辑器和预览区域如何连接以及如何与 Vuex action 交互进行加载/保存的最佳起点。

doc:src/store/modules/layout.js
desc: 理解状态结构 (`LayoutConfig`) 和可用的布局操作 action/mutation 的关键文件。展示了核心逻辑。

doc:src/services/widgetRegistry.js
desc: 理解如何定义新组件、它们具有哪些属性 (`WidgetSchema`) 以及如何使它们在编辑器中可用的关键文件。

# --- Definitions (定义位置) ---
# 将核心概念链接到它们主要被定义或实现的文件。

definition:LayoutConfig -> src/store/modules/layout.js
definition:Widget -> src/components/widgets/
definition:WidgetSchema -> src/services/widgetRegistry.js
definition:WidgetRegistry -> src/services/widgetRegistry.js
definition:VuexLayoutModule -> src/store/modules/layout.js
definition:WidgetConfigForm -> src/components/editor/WidgetConfigForm.vue
definition:PreviewRenderer -> src/components/preview/PreviewRenderer.vue

# --- Relationships (关系) ---
# 描述不同概念或文件如何交互。

relationship:LayoutEditor 使用 ConfigArea 和 PreviewRenderer。
relationship:LayoutEditor 派发 VuexLayoutModule 中的 action (loadConfig, saveConfig)。
relationship:ConfigArea 根据 VuexLayoutModule 状态渲染 ConfigRow 组件。
relationship:ConfigArea 使用 vuedraggable 并提交 MOVE_ROW mutation 到 VuexLayoutModule。
relationship:ConfigArea 派发 ADD_ROW action 到 VuexLayoutModule。
relationship:ConfigRow 根据行数据渲染 ConfigColumn 组件。
relationship:ConfigRow 派发 DELETE_ROW action 到 VuexLayoutModule。
relationship:ConfigColumn 根据列数据渲染 ConfigWidget 组件。
relationship:ConfigColumn 使用 vuedraggable 并提交 MOVE_WIDGET mutation 到 VuexLayoutModule。
relationship:ConfigColumn 派发 ADD_WIDGET action 到 VuexLayoutModule。
relationship:ConfigWidget 显示关于 WidgetInstance 的信息。
relationship:ConfigWidget 派发 DELETE_WIDGET action 到 VuexLayoutModule。
relationship:ConfigWidget 使用 WidgetConfigForm (通常在模态框中) 来编辑 WidgetProps。
relationship:ConfigWidget 在编辑后提交 UPDATE_WIDGET_PROPS mutation 到 VuexLayoutModule。
relationship:WidgetConfigForm 使用 WidgetSchema (通过 Vuex getter/props 从 WidgetRegistry 获取) 来动态生成表单字段。
relationship:WidgetConfigForm 将更新后的 WidgetProps 发送回 ConfigWidget。
relationship:PreviewRenderer 读取 LayoutConfig (通过 props/mapState 从 Vuex state 获取)。
relationship:PreviewRenderer 使用 `<component :is="...">` 动态渲染 Widget 组件。
relationship:PreviewRenderer 将来自 LayoutConfig 的 WidgetProps 传递给渲染出的 Widget 组件。
relationship:Widget 组件 (例如 NewsListWidget) 可能会根据接收到的 WidgetProps 使用 mockApi 获取数据。
relationship:VuexLayoutModule 从 WidgetRegistry 获取可用的组件定义 (包括 WidgetSchema)。
relationship:所有 EditorComponent 都严重依赖 VuexLayoutModule 的 state、getters、actions 和 mutations。

# --- Rules (通用规则) ---
# 关于项目模式的通用指南或解释。

rule:状态管理 - 所有布局配置状态都集中在命名空间的 'layout' Vuex 模块 (`src/store/modules/layout.js`) 中。组件应通过映射的 state/getters 和 actions/mutations 与状态交互。避免在组件本地状态中管理布局结构。
rule:响应式 - 提交到 Vuex `layoutConfig` 状态的更改应响应式地更新编辑器 UI (EditorComponent) 和预览 (PreviewRenderer)。在 Vue 2 中可能需要 Vue.$set 或替换对象/数组来实现深度响应。
rule:组件定义 - 添加新组件类型：1. 在 `src/components/widgets/` 中创建组件。2. 在 `src/services/widgetRegistry.js` 中定义其入口 (名称、图标、组件导入、schema)。3. 可选地，在 `src/services/mockApi.js` 中添加模拟数据获取逻辑。
rule:配置 UI - 编辑器组件 (`src/components/editor/`) 镜像布局的结构 (区域 > 行 > 列 > 组件)。
rule:Schema 驱动表单 - 组件配置表单不是硬编码的，而是由 `WidgetConfigForm` 根据 `widgetRegistry` 中定义的 `WidgetSchema` 动态生成的。
rule:拖放 - 使用 `vuedraggable` 库在编辑器内实现行和组件的重新排序。拖动事件触发 Vuex mutation (`MOVE_ROW`, `MOVE_WIDGET`) 来更新中央状态。
rule:预览 - `PreviewRenderer` 负责解释 `layoutConfig` 状态并渲染 *实际的* `Widget` 组件，提供实时预览。
rule:API 模拟 - 所有后端交互都通过 `src/services/mockApi.js` 进行模拟。与后端集成时，用实际的 API 调用替换它。
rule:数据流 - 编辑器 UI 修改 Vuex 状态 -> Vuex 状态更改触发编辑器 UI 和预览渲染器的响应式更新 -> 预览渲染器渲染 Widget -> Widget 可能基于来自 Vuex 状态的 props 通过 mockApi 获取数据。